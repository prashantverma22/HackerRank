**Link to the challenge - https://www.hackerrank.com/challenges/diagonal-difference/problem

Approach 1 :--

void diagonalDiff(int a[][100], int n){
    int pd = 0, sd = 0;
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            if(i == j){
                pd += a[i][j];
            }
            if((i + j) == n-1){
                sd += a[i][j];
            }
        }
    }
    int ans = abs(pd - sd);
    cout << ans << endl;
}

Time complexity : O(n^2)

-------------------------------------------------------------------------------------------

Approach 2 :--

void diagonalDiffOptimized(int a[][100], int n){
    int pd=0, sd=0;
    for(int i=0; i<n; i++){
        pd += a[i][i];
        sd += a[i][n-1-i];
    }
    int ans = abs(pd-sd);
    cout << ans << endl;
}

Time complexity : O(n)
